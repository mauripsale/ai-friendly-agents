# Basic ANSI escape codes for colors
# Reference: https://gist.github.com/chrisbuilds/76914e33a0a54e96e7828d5846c5c04d

# Standard Colors
COLOR_BLACK = "\033[0;30m"
COLOR_RED = "\033[0;31m"
COLOR_GREEN = "\033[0;32m"
COLOR_YELLOW = "\033[0;33m"
COLOR_BLUE = "\033[0;34m"
COLOR_PURPLE = "\033[0;35m"
COLOR_CYAN = "\033[0;36m"
COLOR_WHITE = "\033[0;37m"

# Bold Colors
COLOR_BOLD_BLACK = "\033[1;30m"
COLOR_BOLD_RED = "\033[1;31m"
COLOR_BOLD_GREEN = "\033[1;32m"
COLOR_BOLD_YELLOW = "\033[1;33m"
COLOR_BOLD_BLUE = "\033[1;34m"
COLOR_BOLD_PURPLE = "\033[1;35m"
COLOR_BOLD_CYAN = "\033[1;36m"
COLOR_BOLD_WHITE = "\033[1;37m"

# Underline
TEXT_UNDERLINE = "\033[4m"

# Reset Code
COLOR_RESET = "\033[0m"

# Simple function to colorize text for terminal output
def colorize(text: str, color_code: str) -> str:
    """Applies ANSI color code to text and resets."""
    return f"{color_code}{text}{COLOR_RESET}"

# Example Usage (if run directly)
if __name__ == "__main__":
    print(f"This is {colorize('important', COLOR_BOLD_RED)} text.")
    print(f"This is {colorize('information', COLOR_BLUE)}.")
    print(f"This is {colorize('a warning', COLOR_YELLOW)}.")
    print(f"This is {colorize(colorize('underlined green', TEXT_UNDERLINE), COLOR_GREEN)}.")

